import json
import re
import random
from datetime import datetime

class PsyCare:
    def __init__(self,modo): #Mudar de modo e arquivo
        self.modo = modo
        if modo == 'formal':
            print("Vou ser mais formal a partir de agora")
            arquivo_json = "respostas_formal.json"
        elif modo == 'amigável' or modo == 'amigavel':
            print("Vou ser mais amigável a partir de agora")
            arquivo_json = "respostas_amigavel.json"
        elif modo == 'direto':
            print("Vou ser mais direto a partir de agora")
            arquivo_json = "respostas_direto.json"
        else:
            arquivo_json = None
        
        if arquivo_json:
            with open(arquivo_json,'r', encoding='utf-8') as f:
                self.dados =  json.load(f)
        else:
            self.dados = {}
    
    def responder(self, user_input): #Buscar respostas
        if not self.dados:
            return "Não há respostas disponíveis."

        texto = self._tratar_texto(user_input)

        for intent in self.dados["respostas"]:
            for entrada in intent["entradas"]:
                palavras = entrada.split()  # divide em palavras
                if all(p in texto for p in palavras):  # verifica se todas estão na frase
                    resposta = random.choice(intent["saidas"])

                    if "acao" in intent:
                        if intent["acao"] == "mudar_modo_formal":
                            self.__init__("formal")
                        elif intent["acao"] == "mudar_modo_amigavel":
                            self.__init__("amigavel")
                        elif intent["acao"] == "mudar_modo_direto":
                            self.__init__("direto")

                    return resposta
                    self.I


        return "Desculpe, não entendi. Pode reformular?"

    def _tratar_texto(self, text):
        text = text.lower()
        text = re.sub(r'[^\w\s]', '', text)  # Remove pontuação
        acentos = "áàâãéèêíïóôõöúçñ"
        nAcentos = "aaaaeeeiiooooucn"
        return text.translate(str.maketrans(acentos, nAcentos))

class Historico:
    def __init__(self, usuario):
        self.usuario = usuario

    def salvar(self, user_input, resposta):
        with open("historico.txt", 'a', encoding='utf-8') as g:
            g.write(f"Usuário:,{self.usuario.nome}\n")
            g.write(datetime.now().strftime("%A %d/%m/%Y %H:%M") + " - " + self.usuario.nome + ": " + user_input + "\n")
            g.write(datetime.now().strftime("%A %d/%m/%Y %H:%M") + " - PsyCare: " + resposta + "\n")
    def ler(self):
        with open("historico.txt", 'r', encoding='utf-8') as g:
            self.historico = g.readlines()
        if not self.historico:
            return "Não há histórico anterior."
        else:
            print("Histórico anterior:")
            return "".join(self.historico)

class Usuario:
    def __init__(self,nome):
        self.nome = nome

nome = input("Olá, qual é seu nome? ")
pessoa = Usuario(nome)
historico = Historico(pessoa)
print(historico.ler())
modo_valido = False
while not modo_valido:
    print(f"\nBem-vindo {nome}, como deseja que eu fale com você?\n.Formal\n.Amigável\n.Direto")
    modo = input(">> ").lower()
    if modo in ["formal", "amigável","amigavel", "direto"]:
        modo_valido = True
    else:
        print("Modo inválido! Digite apenas uma das 3 opções acima.")
bot = PsyCare(modo)
print(f"\nComo posso ajudar?\n.Você pode digitar sair\n.ou mudar de modo a qualquer momento\n\n-Me diga o que está sentindo {pessoa.nome}")
historico = Historico(pessoa)
while True:
    user_input = input(f"{pessoa.nome}: ")
    texto = bot._tratar_texto(user_input)
    if user_input.lower() == 'sair':
        print("PsyCare: Até logo!")
        break

    resposta = bot.responder(user_input)
    print(f"PsyCare: {resposta}")
    historico.salvar(user_input, resposta)


